name: reusable-code_quality_check
on:
  workflow_call:
    outputs:
      image-size:
        description: "The image size"
        value: ${{ jobs.smoke-test.outputs.image-size }}

env:
  FORCE_COLOR: 3
  GO_VERSION: 1.22
defaults:
  run:
    shell: bash

jobs:
  lint:
    timeout-minutes: 2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: # Se necesita pararse en el PR y no en el commit para un posible push
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false # golangci-lint ya usa cache
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --verbose --config=.golangci-gin.yml --timeout 2m --fix
      - name: gofmt
        run: |
            make format
      - name: Check if files changed
        id: check-if-files-changed
        continue-on-error: true
        run: |
          git diff --quiet
      - name: Commit the changes
        if: ${{ steps.check-if-files-changed.outcome == 'failure' }}
        uses: EndBug/add-and-commit@v9
        with:
          author_name: github-actions[bot]
          author_email: github-actions[bot]@users.noreply.github.com
          default_author: github_actor
          message: 'Commit from GitHub Actions (lint_fix)'
          # Arguments for the git fetch command. If set to false, the action won't fetch the repo.
          # For more info as to why fetching is usually recommended, please see the "Performance on large repos" FAQ.
          # Default: --tags --force
          fetch: false
          # TODO: if it fails maybe a report would be nice
          # The way the action should handle pathspec errors from the add and remove commands. Three options are available:
          # - ignore -> errors will be logged but the step won't fail
          # - exitImmediately -> the action will stop right away, and the step will fail
          # - exitAtEnd -> the action will go on, every pathspec error will be logged at the end, the step will fail.
          # Default: ignore
          pathspec_error_handling: ignore
          push: true

#  build-check:
#    timeout-minutes: 2
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: ${{ env.GO_VERSION }}
#      - name: Build the app
#        run: |
#          make build-app
#
  unit-test:
    needs: [lint]
    timeout-minutes: 2
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Prepare rabbit
        run: | 
          docker compose up -d
      - name: Run tests
        id: run-tests
        run: |
          make test
#
#
#  smoke-test:
#    needs: [build-check, lint]
#    timeout-minutes: 3
#    runs-on: ubuntu-latest
#    environment: testing
#    permissions:
#      contents: read
#      pull-requests: write
#    env:
#      CONTAINER_NAME: auth
#    outputs:
#      image-size: ${{ steps.image-size.outputs.image-size }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Prepare smoke test
#        if: ${{ github.event_name == 'push' }}
#        run: |
#          bash ./scripts/smoke-test/prepare_ci_cd.sh
#
#      - name: Build Docker Image
#        run: |
#          docker build -t "smoke-test-${CONTAINER_NAME}" .
#
#      - name: Run smoke test
#        if: ${{ github.event_name == 'push' }}
#        run: |
#          bash ./scripts/smoke-test/run.sh
#
#      - name: Image Size
#        id: image-size
#        run: |
#          image_size_bytes=$(docker image inspect "smoke-test-$CONTAINER_NAME" --format='{{.Size}}')
#          image_size_mb=$((image_size_bytes / (1000 * 1000)))
#          echo -e "\033[0;35m âš¡ $CONTAINER_NAME image size is $image_size_mb MB\033[0m"
#          echo "image-size=$image_size_mb" >> $GITHUB_OUTPUT
#
#      - name: Find image_size_exceeded comment
#        uses: peter-evans/find-comment@v3
#        if: ${{ github.event.pull_request }}
#        id: find-comment
#        with:
#          issue-number: ${{ github.event.pull_request.number }}
#          comment-author: 'github-actions[bot]'
#          body-includes: image_size_exceeded
#      - name: Delete comment
#        if: steps.find-comment.outputs.comment-id != ''
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        run: |
#          gh api \
#            --method DELETE \
#            -H "Accept: application/vnd.github+json" \
#            -H "X-GitHub-Api-Version: 2022-11-28" \
#            /repos/${{ github.repository }}/issues/comments/${{ steps.find-comment.outputs.comment-id }}
